//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EVCharging.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EVModelEntities : DbContext
    {
        public EVModelEntities()
            : base("name=EVModelEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BusinessUnit> BusinessUnits { get; set; }
        public virtual DbSet<Charger> Chargers { get; set; }
        public virtual DbSet<Connector_Type> Connector_Types { get; set; }
        public virtual DbSet<Connector> Connectors { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<PhoneNumber> PhoneNumbers { get; set; }
        public virtual DbSet<RFIDTag> RFIDTags { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<Staticpage> Staticpages { get; set; }
        public virtual DbSet<status> status { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
    
        public virtual int Delete_BusinessUnit(string businessUnitName, string businessUnitCode, string currencyCode, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var businessUnitNameParameter = businessUnitName != null ?
                new ObjectParameter("BusinessUnitName", businessUnitName) :
                new ObjectParameter("BusinessUnitName", typeof(string));
    
            var businessUnitCodeParameter = businessUnitCode != null ?
                new ObjectParameter("BusinessUnitCode", businessUnitCode) :
                new ObjectParameter("BusinessUnitCode", typeof(string));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("CurrencyCode", currencyCode) :
                new ObjectParameter("CurrencyCode", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_BusinessUnit", businessUnitNameParameter, businessUnitCodeParameter, currencyCodeParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Delete_Charger(Nullable<int> locationID, string availability, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var availabilityParameter = availability != null ?
                new ObjectParameter("Availability", availability) :
                new ObjectParameter("Availability", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Charger", locationIDParameter, availabilityParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Delete_Connector(Nullable<int> chargerId, Nullable<int> locationId, Nullable<int> connectorTypeId, string connectorStatus, string sMSCode, string connectorUnId, string tariff, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var chargerIdParameter = chargerId.HasValue ?
                new ObjectParameter("ChargerId", chargerId) :
                new ObjectParameter("ChargerId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var connectorTypeIdParameter = connectorTypeId.HasValue ?
                new ObjectParameter("ConnectorTypeId", connectorTypeId) :
                new ObjectParameter("ConnectorTypeId", typeof(int));
    
            var connectorStatusParameter = connectorStatus != null ?
                new ObjectParameter("ConnectorStatus", connectorStatus) :
                new ObjectParameter("ConnectorStatus", typeof(string));
    
            var sMSCodeParameter = sMSCode != null ?
                new ObjectParameter("SMSCode", sMSCode) :
                new ObjectParameter("SMSCode", typeof(string));
    
            var connectorUnIdParameter = connectorUnId != null ?
                new ObjectParameter("ConnectorUnId", connectorUnId) :
                new ObjectParameter("ConnectorUnId", typeof(string));
    
            var tariffParameter = tariff != null ?
                new ObjectParameter("Tariff", tariff) :
                new ObjectParameter("Tariff", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Connector", chargerIdParameter, locationIdParameter, connectorTypeIdParameter, connectorStatusParameter, sMSCodeParameter, connectorUnIdParameter, tariffParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Delete_Connector_Type(string connectorName, string connectorStandard, string powerType, string connectorFormate, string connectorCategory, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var connectorNameParameter = connectorName != null ?
                new ObjectParameter("ConnectorName", connectorName) :
                new ObjectParameter("ConnectorName", typeof(string));
    
            var connectorStandardParameter = connectorStandard != null ?
                new ObjectParameter("ConnectorStandard", connectorStandard) :
                new ObjectParameter("ConnectorStandard", typeof(string));
    
            var powerTypeParameter = powerType != null ?
                new ObjectParameter("PowerType", powerType) :
                new ObjectParameter("PowerType", typeof(string));
    
            var connectorFormateParameter = connectorFormate != null ?
                new ObjectParameter("ConnectorFormate", connectorFormate) :
                new ObjectParameter("ConnectorFormate", typeof(string));
    
            var connectorCategoryParameter = connectorCategory != null ?
                new ObjectParameter("ConnectorCategory", connectorCategory) :
                new ObjectParameter("ConnectorCategory", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Connector_Type", connectorNameParameter, connectorStandardParameter, powerTypeParameter, connectorFormateParameter, connectorCategoryParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Delete_Customer(string firstName, string lastName, Nullable<int> businessUnitID, string emailAddress, string streetAddress, string postalCode, string city, string country, string invoiceStreetAddress, string invoicePostalCode, string invoiceCity, string invoiceCountr, string site, string telephone, Nullable<int> roleId, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var businessUnitIDParameter = businessUnitID.HasValue ?
                new ObjectParameter("BusinessUnitID", businessUnitID) :
                new ObjectParameter("BusinessUnitID", typeof(int));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var streetAddressParameter = streetAddress != null ?
                new ObjectParameter("streetAddress", streetAddress) :
                new ObjectParameter("streetAddress", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var invoiceStreetAddressParameter = invoiceStreetAddress != null ?
                new ObjectParameter("InvoiceStreetAddress", invoiceStreetAddress) :
                new ObjectParameter("InvoiceStreetAddress", typeof(string));
    
            var invoicePostalCodeParameter = invoicePostalCode != null ?
                new ObjectParameter("InvoicePostalCode", invoicePostalCode) :
                new ObjectParameter("InvoicePostalCode", typeof(string));
    
            var invoiceCityParameter = invoiceCity != null ?
                new ObjectParameter("InvoiceCity", invoiceCity) :
                new ObjectParameter("InvoiceCity", typeof(string));
    
            var invoiceCountrParameter = invoiceCountr != null ?
                new ObjectParameter("InvoiceCountr", invoiceCountr) :
                new ObjectParameter("InvoiceCountr", typeof(string));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Customer", firstNameParameter, lastNameParameter, businessUnitIDParameter, emailAddressParameter, streetAddressParameter, postalCodeParameter, cityParameter, countryParameter, invoiceStreetAddressParameter, invoicePostalCodeParameter, invoiceCityParameter, invoiceCountrParameter, siteParameter, telephoneParameter, roleIdParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Delete_Location(string locationName, string address, string city, Nullable<double> latitude, Nullable<double> longitude, string businessUnitName, string currencyCode, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var businessUnitNameParameter = businessUnitName != null ?
                new ObjectParameter("BusinessUnitName", businessUnitName) :
                new ObjectParameter("BusinessUnitName", typeof(string));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("CurrencyCode", currencyCode) :
                new ObjectParameter("CurrencyCode", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Location", locationNameParameter, addressParameter, cityParameter, latitudeParameter, longitudeParameter, businessUnitNameParameter, currencyCodeParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Delete_PhoneNumber(string telephoneNumber, Nullable<int> customerId, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var telephoneNumberParameter = telephoneNumber != null ?
                new ObjectParameter("TelephoneNumber", telephoneNumber) :
                new ObjectParameter("TelephoneNumber", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_PhoneNumber", telephoneNumberParameter, customerIdParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Delete_RFIDTag(string uid, string hex, string tagType, string rFIDTagNumber, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var uidParameter = uid != null ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(string));
    
            var hexParameter = hex != null ?
                new ObjectParameter("Hex", hex) :
                new ObjectParameter("Hex", typeof(string));
    
            var tagTypeParameter = tagType != null ?
                new ObjectParameter("TagType", tagType) :
                new ObjectParameter("TagType", typeof(string));
    
            var rFIDTagNumberParameter = rFIDTagNumber != null ?
                new ObjectParameter("RFIDTagNumber", rFIDTagNumber) :
                new ObjectParameter("RFIDTagNumber", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_RFIDTag", uidParameter, hexParameter, tagTypeParameter, rFIDTagNumberParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Delete_Role(string roleName, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Role", roleNameParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Delete_Vehicle(Nullable<int> customerId, string model, string licenseId, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var licenseIdParameter = licenseId != null ?
                new ObjectParameter("LicenseId", licenseId) :
                new ObjectParameter("LicenseId", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Vehicle", customerIdParameter, modelParameter, licenseIdParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Insert_BusinessUnit(string businessUnitName, string businessUnitCode, string currencyCode, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var businessUnitNameParameter = businessUnitName != null ?
                new ObjectParameter("BusinessUnitName", businessUnitName) :
                new ObjectParameter("BusinessUnitName", typeof(string));
    
            var businessUnitCodeParameter = businessUnitCode != null ?
                new ObjectParameter("BusinessUnitCode", businessUnitCode) :
                new ObjectParameter("BusinessUnitCode", typeof(string));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("CurrencyCode", currencyCode) :
                new ObjectParameter("CurrencyCode", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_BusinessUnit", businessUnitNameParameter, businessUnitCodeParameter, currencyCodeParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Insert_Charger(Nullable<int> locationID, string availability, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var availabilityParameter = availability != null ?
                new ObjectParameter("Availability", availability) :
                new ObjectParameter("Availability", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Charger", locationIDParameter, availabilityParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Insert_Connector(Nullable<int> chargerId, Nullable<int> locationId, Nullable<int> connectorTypeId, string connectorStatus, string sMSCode, string connectorUnId, string tariff, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var chargerIdParameter = chargerId.HasValue ?
                new ObjectParameter("ChargerId", chargerId) :
                new ObjectParameter("ChargerId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var connectorTypeIdParameter = connectorTypeId.HasValue ?
                new ObjectParameter("ConnectorTypeId", connectorTypeId) :
                new ObjectParameter("ConnectorTypeId", typeof(int));
    
            var connectorStatusParameter = connectorStatus != null ?
                new ObjectParameter("ConnectorStatus", connectorStatus) :
                new ObjectParameter("ConnectorStatus", typeof(string));
    
            var sMSCodeParameter = sMSCode != null ?
                new ObjectParameter("SMSCode", sMSCode) :
                new ObjectParameter("SMSCode", typeof(string));
    
            var connectorUnIdParameter = connectorUnId != null ?
                new ObjectParameter("ConnectorUnId", connectorUnId) :
                new ObjectParameter("ConnectorUnId", typeof(string));
    
            var tariffParameter = tariff != null ?
                new ObjectParameter("Tariff", tariff) :
                new ObjectParameter("Tariff", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Connector", chargerIdParameter, locationIdParameter, connectorTypeIdParameter, connectorStatusParameter, sMSCodeParameter, connectorUnIdParameter, tariffParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Insert_Connector_Type(string connectorName, string connectorStandard, string powerType, string connectorFormate, string connectorCategory, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var connectorNameParameter = connectorName != null ?
                new ObjectParameter("ConnectorName", connectorName) :
                new ObjectParameter("ConnectorName", typeof(string));
    
            var connectorStandardParameter = connectorStandard != null ?
                new ObjectParameter("ConnectorStandard", connectorStandard) :
                new ObjectParameter("ConnectorStandard", typeof(string));
    
            var powerTypeParameter = powerType != null ?
                new ObjectParameter("PowerType", powerType) :
                new ObjectParameter("PowerType", typeof(string));
    
            var connectorFormateParameter = connectorFormate != null ?
                new ObjectParameter("ConnectorFormate", connectorFormate) :
                new ObjectParameter("ConnectorFormate", typeof(string));
    
            var connectorCategoryParameter = connectorCategory != null ?
                new ObjectParameter("ConnectorCategory", connectorCategory) :
                new ObjectParameter("ConnectorCategory", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Connector_Type", connectorNameParameter, connectorStandardParameter, powerTypeParameter, connectorFormateParameter, connectorCategoryParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Insert_Customer(string firstName, string lastName, Nullable<int> businessUnitID, string emailAddress, string streetAddress, string postalCode, string city, string country, string invoiceStreetAddress, string invoicePostalCode, string invoiceCity, string invoiceCountr, string site, string telephone, Nullable<int> roleId, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var businessUnitIDParameter = businessUnitID.HasValue ?
                new ObjectParameter("BusinessUnitID", businessUnitID) :
                new ObjectParameter("BusinessUnitID", typeof(int));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var streetAddressParameter = streetAddress != null ?
                new ObjectParameter("streetAddress", streetAddress) :
                new ObjectParameter("streetAddress", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var invoiceStreetAddressParameter = invoiceStreetAddress != null ?
                new ObjectParameter("InvoiceStreetAddress", invoiceStreetAddress) :
                new ObjectParameter("InvoiceStreetAddress", typeof(string));
    
            var invoicePostalCodeParameter = invoicePostalCode != null ?
                new ObjectParameter("InvoicePostalCode", invoicePostalCode) :
                new ObjectParameter("InvoicePostalCode", typeof(string));
    
            var invoiceCityParameter = invoiceCity != null ?
                new ObjectParameter("InvoiceCity", invoiceCity) :
                new ObjectParameter("InvoiceCity", typeof(string));
    
            var invoiceCountrParameter = invoiceCountr != null ?
                new ObjectParameter("InvoiceCountr", invoiceCountr) :
                new ObjectParameter("InvoiceCountr", typeof(string));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Customer", firstNameParameter, lastNameParameter, businessUnitIDParameter, emailAddressParameter, streetAddressParameter, postalCodeParameter, cityParameter, countryParameter, invoiceStreetAddressParameter, invoicePostalCodeParameter, invoiceCityParameter, invoiceCountrParameter, siteParameter, telephoneParameter, roleIdParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Insert_Location(string locationName, string address, string city, Nullable<double> latitude, Nullable<double> longitude, string businessUnitName, string currencyCode, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var businessUnitNameParameter = businessUnitName != null ?
                new ObjectParameter("BusinessUnitName", businessUnitName) :
                new ObjectParameter("BusinessUnitName", typeof(string));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("CurrencyCode", currencyCode) :
                new ObjectParameter("CurrencyCode", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Location", locationNameParameter, addressParameter, cityParameter, latitudeParameter, longitudeParameter, businessUnitNameParameter, currencyCodeParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Insert_PhoneNumber(string telephoneNumber, Nullable<int> customerId, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var telephoneNumberParameter = telephoneNumber != null ?
                new ObjectParameter("TelephoneNumber", telephoneNumber) :
                new ObjectParameter("TelephoneNumber", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_PhoneNumber", telephoneNumberParameter, customerIdParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Insert_RFIDTag(string uid, string hex, string tagType, string rFIDTagNumber, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var uidParameter = uid != null ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(string));
    
            var hexParameter = hex != null ?
                new ObjectParameter("Hex", hex) :
                new ObjectParameter("Hex", typeof(string));
    
            var tagTypeParameter = tagType != null ?
                new ObjectParameter("TagType", tagType) :
                new ObjectParameter("TagType", typeof(string));
    
            var rFIDTagNumberParameter = rFIDTagNumber != null ?
                new ObjectParameter("RFIDTagNumber", rFIDTagNumber) :
                new ObjectParameter("RFIDTagNumber", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_RFIDTag", uidParameter, hexParameter, tagTypeParameter, rFIDTagNumberParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Insert_Role(string roleName, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Role", roleNameParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Insert_Vehicle(Nullable<int> customerId, string model, string licenseId, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var licenseIdParameter = licenseId != null ?
                new ObjectParameter("LicenseId", licenseId) :
                new ObjectParameter("LicenseId", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Vehicle", customerIdParameter, modelParameter, licenseIdParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual ObjectResult<Select_BusinessUnits_Result> Select_BusinessUnits()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Select_BusinessUnits_Result>("Select_BusinessUnits");
        }
    
        public virtual ObjectResult<Select_Chargers_Result> Select_Chargers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Select_Chargers_Result>("Select_Chargers");
        }
    
        public virtual ObjectResult<Select_Connector_Result> Select_Connector()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Select_Connector_Result>("Select_Connector");
        }
    
        public virtual ObjectResult<Select_ConnectorTypes_Result> Select_ConnectorTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Select_ConnectorTypes_Result>("Select_ConnectorTypes");
        }
    
        public virtual ObjectResult<Select_Customer_Result> Select_Customer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Select_Customer_Result>("Select_Customer");
        }
    
        public virtual ObjectResult<Select_Location_Result> Select_Location()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Select_Location_Result>("Select_Location");
        }
    
        public virtual ObjectResult<Select_PhoneNumber_Result> Select_PhoneNumber()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Select_PhoneNumber_Result>("Select_PhoneNumber");
        }
    
        public virtual ObjectResult<Select_RFIDTag_Result> Select_RFIDTag()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Select_RFIDTag_Result>("Select_RFIDTag");
        }
    
        public virtual ObjectResult<Select_Role_Result> Select_Role()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Select_Role_Result>("Select_Role");
        }
    
        public virtual ObjectResult<Select_Vehicle_Result> Select_Vehicle()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Select_Vehicle_Result>("Select_Vehicle");
        }
    
        public virtual int Update_BusinessUnit(string businessUnitName, string businessUnitCode, string currencyCode, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var businessUnitNameParameter = businessUnitName != null ?
                new ObjectParameter("BusinessUnitName", businessUnitName) :
                new ObjectParameter("BusinessUnitName", typeof(string));
    
            var businessUnitCodeParameter = businessUnitCode != null ?
                new ObjectParameter("BusinessUnitCode", businessUnitCode) :
                new ObjectParameter("BusinessUnitCode", typeof(string));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("CurrencyCode", currencyCode) :
                new ObjectParameter("CurrencyCode", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_BusinessUnit", businessUnitNameParameter, businessUnitCodeParameter, currencyCodeParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Update_Charger(Nullable<int> locationID, string availability, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var availabilityParameter = availability != null ?
                new ObjectParameter("Availability", availability) :
                new ObjectParameter("Availability", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Charger", locationIDParameter, availabilityParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Update_Connector(Nullable<int> chargerId, Nullable<int> locationId, Nullable<int> connectorTypeId, string connectorStatus, string sMSCode, string connectorUnId, string tariff, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var chargerIdParameter = chargerId.HasValue ?
                new ObjectParameter("ChargerId", chargerId) :
                new ObjectParameter("ChargerId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var connectorTypeIdParameter = connectorTypeId.HasValue ?
                new ObjectParameter("ConnectorTypeId", connectorTypeId) :
                new ObjectParameter("ConnectorTypeId", typeof(int));
    
            var connectorStatusParameter = connectorStatus != null ?
                new ObjectParameter("ConnectorStatus", connectorStatus) :
                new ObjectParameter("ConnectorStatus", typeof(string));
    
            var sMSCodeParameter = sMSCode != null ?
                new ObjectParameter("SMSCode", sMSCode) :
                new ObjectParameter("SMSCode", typeof(string));
    
            var connectorUnIdParameter = connectorUnId != null ?
                new ObjectParameter("ConnectorUnId", connectorUnId) :
                new ObjectParameter("ConnectorUnId", typeof(string));
    
            var tariffParameter = tariff != null ?
                new ObjectParameter("Tariff", tariff) :
                new ObjectParameter("Tariff", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Connector", chargerIdParameter, locationIdParameter, connectorTypeIdParameter, connectorStatusParameter, sMSCodeParameter, connectorUnIdParameter, tariffParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Update_Connector_Type(string connectorName, string connectorStandard, string powerType, string connectorFormate, string connectorCategory, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var connectorNameParameter = connectorName != null ?
                new ObjectParameter("ConnectorName", connectorName) :
                new ObjectParameter("ConnectorName", typeof(string));
    
            var connectorStandardParameter = connectorStandard != null ?
                new ObjectParameter("ConnectorStandard", connectorStandard) :
                new ObjectParameter("ConnectorStandard", typeof(string));
    
            var powerTypeParameter = powerType != null ?
                new ObjectParameter("PowerType", powerType) :
                new ObjectParameter("PowerType", typeof(string));
    
            var connectorFormateParameter = connectorFormate != null ?
                new ObjectParameter("ConnectorFormate", connectorFormate) :
                new ObjectParameter("ConnectorFormate", typeof(string));
    
            var connectorCategoryParameter = connectorCategory != null ?
                new ObjectParameter("ConnectorCategory", connectorCategory) :
                new ObjectParameter("ConnectorCategory", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Connector_Type", connectorNameParameter, connectorStandardParameter, powerTypeParameter, connectorFormateParameter, connectorCategoryParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Update_Customer(string firstName, string lastName, Nullable<int> businessUnitID, string emailAddress, string streetAddress, string postalCode, string city, string country, string invoiceStreetAddress, string invoicePostalCode, string invoiceCity, string invoiceCountr, string site, string telephone, Nullable<int> roleId, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var businessUnitIDParameter = businessUnitID.HasValue ?
                new ObjectParameter("BusinessUnitID", businessUnitID) :
                new ObjectParameter("BusinessUnitID", typeof(int));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var streetAddressParameter = streetAddress != null ?
                new ObjectParameter("streetAddress", streetAddress) :
                new ObjectParameter("streetAddress", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var invoiceStreetAddressParameter = invoiceStreetAddress != null ?
                new ObjectParameter("InvoiceStreetAddress", invoiceStreetAddress) :
                new ObjectParameter("InvoiceStreetAddress", typeof(string));
    
            var invoicePostalCodeParameter = invoicePostalCode != null ?
                new ObjectParameter("InvoicePostalCode", invoicePostalCode) :
                new ObjectParameter("InvoicePostalCode", typeof(string));
    
            var invoiceCityParameter = invoiceCity != null ?
                new ObjectParameter("InvoiceCity", invoiceCity) :
                new ObjectParameter("InvoiceCity", typeof(string));
    
            var invoiceCountrParameter = invoiceCountr != null ?
                new ObjectParameter("InvoiceCountr", invoiceCountr) :
                new ObjectParameter("InvoiceCountr", typeof(string));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Customer", firstNameParameter, lastNameParameter, businessUnitIDParameter, emailAddressParameter, streetAddressParameter, postalCodeParameter, cityParameter, countryParameter, invoiceStreetAddressParameter, invoicePostalCodeParameter, invoiceCityParameter, invoiceCountrParameter, siteParameter, telephoneParameter, roleIdParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Update_Location(string locationName, string address, string city, Nullable<double> latitude, Nullable<double> longitude, string businessUnitName, string currencyCode, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var businessUnitNameParameter = businessUnitName != null ?
                new ObjectParameter("BusinessUnitName", businessUnitName) :
                new ObjectParameter("BusinessUnitName", typeof(string));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("CurrencyCode", currencyCode) :
                new ObjectParameter("CurrencyCode", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Location", locationNameParameter, addressParameter, cityParameter, latitudeParameter, longitudeParameter, businessUnitNameParameter, currencyCodeParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Update_PhoneNumber(string telephoneNumber, Nullable<int> customerId, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var telephoneNumberParameter = telephoneNumber != null ?
                new ObjectParameter("TelephoneNumber", telephoneNumber) :
                new ObjectParameter("TelephoneNumber", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PhoneNumber", telephoneNumberParameter, customerIdParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Update_RFIDTag(string uid, string hex, string tagType, string rFIDTagNumber, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var uidParameter = uid != null ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(string));
    
            var hexParameter = hex != null ?
                new ObjectParameter("Hex", hex) :
                new ObjectParameter("Hex", typeof(string));
    
            var tagTypeParameter = tagType != null ?
                new ObjectParameter("TagType", tagType) :
                new ObjectParameter("TagType", typeof(string));
    
            var rFIDTagNumberParameter = rFIDTagNumber != null ?
                new ObjectParameter("RFIDTagNumber", rFIDTagNumber) :
                new ObjectParameter("RFIDTagNumber", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_RFIDTag", uidParameter, hexParameter, tagTypeParameter, rFIDTagNumberParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Update_Role(string roleName, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Role", roleNameParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    
        public virtual int Update_Vehicle(Nullable<int> customerId, string model, string licenseId, Nullable<System.DateTime> insertDate, Nullable<System.DateTime> updateDate, Nullable<System.DateTime> deleteDate, Nullable<bool> isDeleted)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var licenseIdParameter = licenseId != null ?
                new ObjectParameter("LicenseId", licenseId) :
                new ObjectParameter("LicenseId", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Vehicle", customerIdParameter, modelParameter, licenseIdParameter, insertDateParameter, updateDateParameter, deleteDateParameter, isDeletedParameter);
        }
    }
}
